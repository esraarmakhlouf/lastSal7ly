// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long>("CountryID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Model.ContactUs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Model.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Model.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long?>("CityId");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailActivated");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(500);

                    b.Property<string>("ImageName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<double>("Pocket");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("active");

                    b.Property<string>("mobToken");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Model.CustomerReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CustomerReview");
                });

            modelBuilder.Entity("Model.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("CityID");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Model.ForgetPasswordURL", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Expiration");

                    b.Property<long>("ToId");

                    b.Property<int>("ToType");

                    b.Property<Guid>("Token")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ForgetPasswordURLs");
                });

            modelBuilder.Entity("Model.GroupPermissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupId");

                    b.Property<long>("PermissionId");

                    b.Property<long>("ScreenId");

                    b.HasKey("Id");

                    b.ToTable("GroupPermissions");
                });

            modelBuilder.Entity("Model.Groups", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long>("CompanyId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMaster");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArabicName = "مجموعة عامة",
                            Code = "GR-1",
                            CompanyId = 0L,
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 476, DateTimeKind.Local).AddTicks(7071),
                            EnglishName = "General Group",
                            IsActive = true,
                            IsDeleted = false,
                            IsMaster = true
                        });
                });

            modelBuilder.Entity("Model.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DescriptionArabic")
                        .IsRequired();

                    b.Property<string>("DescriptionEnglish")
                        .IsRequired();

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<double>("Price");

                    b.Property<long>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Model.ItemFavourite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("CustomerId");

                    b.Property<long>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemFavourite");
                });

            modelBuilder.Entity("Model.ItemImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<long>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("Model.ItemsCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("CustomerId");

                    b.Property<long>("ItemId");

                    b.Property<DateTime>("ModificationDate");

                    b.Property<long>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsCart");
                });

            modelBuilder.Entity("Model.JobTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMaster");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArabicName = "مدير",
                            Code = "Job-1",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 489, DateTimeKind.Local).AddTicks(6416),
                            EnglishName = "Manager",
                            IsActive = true,
                            IsDeleted = false,
                            IsMaster = false
                        },
                        new
                        {
                            Id = 2L,
                            ArabicName = "فني",
                            Code = "Job-2",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 489, DateTimeKind.Local).AddTicks(7237),
                            EnglishName = "Technical",
                            IsActive = true,
                            IsDeleted = false,
                            IsMaster = false
                        },
                        new
                        {
                            Id = 3L,
                            ArabicName = "مورد",
                            Code = "Job-3",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 489, DateTimeKind.Local).AddTicks(7271),
                            EnglishName = "Supplier",
                            IsActive = true,
                            IsDeleted = false,
                            IsMaster = false
                        },
                        new
                        {
                            Id = 4L,
                            ArabicName = "سكرتيره",
                            Code = "Job-4",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 489, DateTimeKind.Local).AddTicks(7291),
                            EnglishName = "Secretary",
                            IsActive = true,
                            IsDeleted = false,
                            IsMaster = false
                        });
                });

            modelBuilder.Entity("Model.Modules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArabicName = "ادارة المستخدمين",
                            Code = "MOD-1",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 479, DateTimeKind.Local).AddTicks(4271),
                            EnglishName = "Users Management",
                            Icon = "fas fa-users-cog",
                            IsActive = true,
                            IsDeleted = false,
                            Rank = 1
                        },
                        new
                        {
                            Id = 2L,
                            ArabicName = "اعدادات النظام",
                            Code = "MOD-2",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 479, DateTimeKind.Local).AddTicks(5352),
                            EnglishName = "System Settings",
                            Icon = "fa fa-cogs",
                            IsActive = true,
                            IsDeleted = false,
                            Rank = 1
                        },
                        new
                        {
                            Id = 3L,
                            ArabicName = "التقارير",
                            Code = "MOD-3",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 479, DateTimeKind.Local).AddTicks(5385),
                            EnglishName = "Orders Management",
                            Icon = "fas fa-shopping-cart",
                            IsActive = true,
                            IsDeleted = false,
                            Rank = 1
                        },
                        new
                        {
                            Id = 4L,
                            ArabicName = "ادارة العملاء",
                            Code = "MOD-4",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 479, DateTimeKind.Local).AddTicks(6152),
                            EnglishName = "Customers Management",
                            Icon = "fas fa-user-tie",
                            IsActive = true,
                            IsDeleted = true,
                            Rank = 1
                        },
                        new
                        {
                            Id = 6L,
                            ArabicName = "الاعدادات",
                            Code = "MOD-6",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 479, DateTimeKind.Local).AddTicks(6254),
                            EnglishName = "Configuration",
                            Icon = "fa fa-cogs",
                            IsActive = true,
                            IsDeleted = true,
                            Rank = 1
                        });
                });

            modelBuilder.Entity("Model.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAlert");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<bool>("Seen");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("ToUSer");

                    b.Property<int>("TypeOfUser");

                    b.Property<string>("URl");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Model.Offer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyThroughCoupon");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("CouponCode");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long?>("FreeItemId");

                    b.Property<double>("FreeQty");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MainCategoryId");

                    b.Property<long?>("MainItemId");

                    b.Property<double>("MainQty");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<double>("OfferValue");

                    b.HasKey("Id");

                    b.HasIndex("FreeItemId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("MainItemId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Model.OfferActiveDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<long>("OfferId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("OfferActiveDates");
                });

            modelBuilder.Entity("Model.OfferItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ItemId");

                    b.Property<long>("OfferId");

                    b.HasKey("Id");

                    b.ToTable("OfferItems");
                });

            modelBuilder.Entity("Model.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("CustomerId");

                    b.Property<DateTime?>("DeliverDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<int?>("OrderTrackActionId")
                        .IsRequired();

                    b.Property<int>("Rate");

                    b.Property<int>("ResponsibleRate");

                    b.Property<string>("ResponsibleReview");

                    b.Property<long?>("ResponsibleUserId");

                    b.Property<string>("Review");

                    b.Property<double>("TechCommission");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderTrackActionId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Model.OrderItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<double>("DiscountPrice");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("ItemId");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<long?>("OrderId")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<long>("Quantity");

                    b.Property<int?>("Rate");

                    b.Property<string>("Review")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Model.OrderServices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DeliverTimeFrom");

                    b.Property<DateTime>("DeliverTimeTo");

                    b.Property<double>("DiscounttPrice");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPriority");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<long?>("OrderId")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<string>("PromoCode");

                    b.Property<int?>("Rate");

                    b.Property<string>("Review")
                        .HasMaxLength(500);

                    b.Property<string>("ServiceComment");

                    b.Property<long>("ServiceId");

                    b.Property<string>("ServiceImage");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderServices");
                });

            modelBuilder.Entity("Model.OrderServicesImages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<long>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ServicesImages");
                });

            modelBuilder.Entity("Model.OrderTechnicalAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("OrderId")
                        .IsRequired();

                    b.Property<long?>("TechnicalUserId");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TechnicalUserId");

                    b.ToTable("OrderTechnicalAssignment");
                });

            modelBuilder.Entity("Model.OrderTrack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long?>("OrderId")
                        .IsRequired();

                    b.Property<int?>("OrderTrackActionId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderTrackActionId");

                    b.ToTable("OrderTrack");
                });

            modelBuilder.Entity("Model.OrderTrackAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.HasKey("Id");

                    b.ToTable("Ordertrackaction");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "ملغى",
                            Code = "or-action-1",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(2600),
                            EnglishName = "canceled",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "مرفوض",
                            Code = "or-action-2",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3345),
                            EnglishName = "rejected",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicName = "طلب",
                            Code = "or-action-3",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3377),
                            EnglishName = "Ordered",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ArabicName = "استلمها المستخدم ",
                            Code = "or-action-4",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3398),
                            EnglishName = "accpted_by_user",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ArabicName = "في تقدم",
                            Code = "or-action-5",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3419),
                            EnglishName = "in_progress",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            ArabicName = "شحنت",
                            Code = "or-action-6",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3446),
                            EnglishName = "shipped",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            ArabicName = "تم التوصيل",
                            Code = "or-action-7",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3465),
                            EnglishName = "delivered",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            ArabicName = "منتهى",
                            Code = "or-action-8",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3484),
                            EnglishName = "completed",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            ArabicName = "تم تقيمه",
                            Code = "or-action-9",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 490, DateTimeKind.Local).AddTicks(3503),
                            EnglishName = "reviewed",
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Model.Permissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<string>("PermissionCode")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArabicName = "عرض",
                            Code = "PER-1",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 486, DateTimeKind.Local).AddTicks(2480),
                            EnglishName = "View",
                            IsActive = true,
                            IsDeleted = false,
                            PermissionCode = "Index"
                        },
                        new
                        {
                            Id = 2L,
                            ArabicName = "أنشاء",
                            Code = "PER-2",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 486, DateTimeKind.Local).AddTicks(3430),
                            EnglishName = "Create",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            ArabicName = "تعديل",
                            Code = "PER-3",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 486, DateTimeKind.Local).AddTicks(3463),
                            EnglishName = "Edit",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            ArabicName = "حذف",
                            Code = "PER-4",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 486, DateTimeKind.Local).AddTicks(3487),
                            EnglishName = "Delete",
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Model.PocketHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<string>("Text");

                    b.Property<long>("ToUSer");

                    b.Property<int>("Transaction");

                    b.Property<int>("TypeUser");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("PocketHistories");
                });

            modelBuilder.Entity("Model.ReadyTechnicals", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("TechnicalId");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalId");

                    b.ToTable("ReadyTechnicals");
                });

            modelBuilder.Entity("Model.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .HasMaxLength(500);

                    b.Property<double>("CenterLat");

                    b.Property<double>("CenterLong");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCycle");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<double>("Radius");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Model.RegionPoints", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<long>("RegionId");

                    b.Property<double>("lat");

                    b.Property<double>("lng");

                    b.HasKey("Id");

                    b.ToTable("RegionPoints");
                });

            modelBuilder.Entity("Model.ScreenPermissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PermissionId");

                    b.Property<long>("ScreenId");

                    b.HasKey("Id");

                    b.ToTable("ScreenPermissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PermissionId = 1L,
                            ScreenId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            PermissionId = 2L,
                            ScreenId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            PermissionId = 3L,
                            ScreenId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            PermissionId = 4L,
                            ScreenId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            PermissionId = 1L,
                            ScreenId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            PermissionId = 2L,
                            ScreenId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            PermissionId = 3L,
                            ScreenId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            PermissionId = 4L,
                            ScreenId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            PermissionId = 1L,
                            ScreenId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            PermissionId = 2L,
                            ScreenId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            PermissionId = 3L,
                            ScreenId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            PermissionId = 4L,
                            ScreenId = 3L
                        },
                        new
                        {
                            Id = 13L,
                            PermissionId = 1L,
                            ScreenId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            PermissionId = 2L,
                            ScreenId = 4L
                        },
                        new
                        {
                            Id = 15L,
                            PermissionId = 3L,
                            ScreenId = 4L
                        },
                        new
                        {
                            Id = 16L,
                            PermissionId = 4L,
                            ScreenId = 4L
                        },
                        new
                        {
                            Id = 21L,
                            PermissionId = 1L,
                            ScreenId = 6L
                        },
                        new
                        {
                            Id = 22L,
                            PermissionId = 2L,
                            ScreenId = 6L
                        },
                        new
                        {
                            Id = 23L,
                            PermissionId = 3L,
                            ScreenId = 6L
                        },
                        new
                        {
                            Id = 24L,
                            PermissionId = 4L,
                            ScreenId = 6L
                        },
                        new
                        {
                            Id = 33L,
                            PermissionId = 1L,
                            ScreenId = 9L
                        },
                        new
                        {
                            Id = 34L,
                            PermissionId = 2L,
                            ScreenId = 9L
                        },
                        new
                        {
                            Id = 35L,
                            PermissionId = 3L,
                            ScreenId = 9L
                        },
                        new
                        {
                            Id = 36L,
                            PermissionId = 4L,
                            ScreenId = 9L
                        },
                        new
                        {
                            Id = 41L,
                            PermissionId = 1L,
                            ScreenId = 11L
                        },
                        new
                        {
                            Id = 42L,
                            PermissionId = 2L,
                            ScreenId = 11L
                        },
                        new
                        {
                            Id = 43L,
                            PermissionId = 3L,
                            ScreenId = 11L
                        },
                        new
                        {
                            Id = 44L,
                            PermissionId = 4L,
                            ScreenId = 11L
                        },
                        new
                        {
                            Id = 49L,
                            PermissionId = 1L,
                            ScreenId = 13L
                        },
                        new
                        {
                            Id = 50L,
                            PermissionId = 2L,
                            ScreenId = 13L
                        },
                        new
                        {
                            Id = 51L,
                            PermissionId = 3L,
                            ScreenId = 13L
                        },
                        new
                        {
                            Id = 52L,
                            PermissionId = 4L,
                            ScreenId = 13L
                        },
                        new
                        {
                            Id = 66L,
                            PermissionId = 1L,
                            ScreenId = 14L
                        },
                        new
                        {
                            Id = 67L,
                            PermissionId = 2L,
                            ScreenId = 14L
                        },
                        new
                        {
                            Id = 68L,
                            PermissionId = 3L,
                            ScreenId = 14L
                        },
                        new
                        {
                            Id = 69L,
                            PermissionId = 4L,
                            ScreenId = 14L
                        },
                        new
                        {
                            Id = 78L,
                            PermissionId = 1L,
                            ScreenId = 15L
                        },
                        new
                        {
                            Id = 79L,
                            PermissionId = 2L,
                            ScreenId = 15L
                        },
                        new
                        {
                            Id = 80L,
                            PermissionId = 3L,
                            ScreenId = 15L
                        },
                        new
                        {
                            Id = 81L,
                            PermissionId = 4L,
                            ScreenId = 16L
                        },
                        new
                        {
                            Id = 84L,
                            PermissionId = 3L,
                            ScreenId = 22L
                        },
                        new
                        {
                            Id = 85L,
                            PermissionId = 4L,
                            ScreenId = 22L
                        },
                        new
                        {
                            Id = 86L,
                            PermissionId = 1L,
                            ScreenId = 23L
                        },
                        new
                        {
                            Id = 87L,
                            PermissionId = 2L,
                            ScreenId = 23L
                        },
                        new
                        {
                            Id = 88L,
                            PermissionId = 3L,
                            ScreenId = 23L
                        },
                        new
                        {
                            Id = 89L,
                            PermissionId = 4L,
                            ScreenId = 23L
                        },
                        new
                        {
                            Id = 90L,
                            PermissionId = 1L,
                            ScreenId = 24L
                        },
                        new
                        {
                            Id = 91L,
                            PermissionId = 2L,
                            ScreenId = 24L
                        },
                        new
                        {
                            Id = 92L,
                            PermissionId = 3L,
                            ScreenId = 24L
                        },
                        new
                        {
                            Id = 93L,
                            PermissionId = 4L,
                            ScreenId = 24L
                        },
                        new
                        {
                            Id = 94L,
                            PermissionId = 1L,
                            ScreenId = 5L
                        },
                        new
                        {
                            Id = 95L,
                            PermissionId = 2L,
                            ScreenId = 5L
                        },
                        new
                        {
                            Id = 96L,
                            PermissionId = 3L,
                            ScreenId = 5L
                        },
                        new
                        {
                            Id = 97L,
                            PermissionId = 4L,
                            ScreenId = 5L
                        },
                        new
                        {
                            Id = 98L,
                            PermissionId = 1L,
                            ScreenId = 26L
                        },
                        new
                        {
                            Id = 99L,
                            PermissionId = 2L,
                            ScreenId = 26L
                        },
                        new
                        {
                            Id = 100L,
                            PermissionId = 3L,
                            ScreenId = 26L
                        },
                        new
                        {
                            Id = 101L,
                            PermissionId = 4L,
                            ScreenId = 26L
                        },
                        new
                        {
                            Id = 110L,
                            PermissionId = 1L,
                            ScreenId = 29L
                        },
                        new
                        {
                            Id = 111L,
                            PermissionId = 2L,
                            ScreenId = 29L
                        },
                        new
                        {
                            Id = 112L,
                            PermissionId = 3L,
                            ScreenId = 29L
                        },
                        new
                        {
                            Id = 113L,
                            PermissionId = 4L,
                            ScreenId = 29L
                        },
                        new
                        {
                            Id = 114L,
                            PermissionId = 1L,
                            ScreenId = 30L
                        },
                        new
                        {
                            Id = 115L,
                            PermissionId = 2L,
                            ScreenId = 30L
                        },
                        new
                        {
                            Id = 116L,
                            PermissionId = 3L,
                            ScreenId = 30L
                        },
                        new
                        {
                            Id = 117L,
                            PermissionId = 4L,
                            ScreenId = 30L
                        },
                        new
                        {
                            Id = 118L,
                            PermissionId = 1L,
                            ScreenId = 31L
                        },
                        new
                        {
                            Id = 119L,
                            PermissionId = 2L,
                            ScreenId = 31L
                        },
                        new
                        {
                            Id = 120L,
                            PermissionId = 3L,
                            ScreenId = 31L
                        },
                        new
                        {
                            Id = 121L,
                            PermissionId = 4L,
                            ScreenId = 31L
                        },
                        new
                        {
                            Id = 122L,
                            PermissionId = 1L,
                            ScreenId = 32L
                        },
                        new
                        {
                            Id = 123L,
                            PermissionId = 2L,
                            ScreenId = 32L
                        },
                        new
                        {
                            Id = 124L,
                            PermissionId = 3L,
                            ScreenId = 32L
                        },
                        new
                        {
                            Id = 125L,
                            PermissionId = 4L,
                            ScreenId = 32L
                        },
                        new
                        {
                            Id = 126L,
                            PermissionId = 1L,
                            ScreenId = 35L
                        },
                        new
                        {
                            Id = 127L,
                            PermissionId = 2L,
                            ScreenId = 35L
                        },
                        new
                        {
                            Id = 128L,
                            PermissionId = 3L,
                            ScreenId = 35L
                        },
                        new
                        {
                            Id = 129L,
                            PermissionId = 4L,
                            ScreenId = 35L
                        },
                        new
                        {
                            Id = 130L,
                            PermissionId = 1L,
                            ScreenId = 36L
                        },
                        new
                        {
                            Id = 131L,
                            PermissionId = 2L,
                            ScreenId = 36L
                        },
                        new
                        {
                            Id = 132L,
                            PermissionId = 3L,
                            ScreenId = 36L
                        },
                        new
                        {
                            Id = 133L,
                            PermissionId = 4L,
                            ScreenId = 36L
                        },
                        new
                        {
                            Id = 134L,
                            PermissionId = 1L,
                            ScreenId = 37L
                        },
                        new
                        {
                            Id = 135L,
                            PermissionId = 2L,
                            ScreenId = 37L
                        },
                        new
                        {
                            Id = 136L,
                            PermissionId = 3L,
                            ScreenId = 37L
                        },
                        new
                        {
                            Id = 137L,
                            PermissionId = 4L,
                            ScreenId = 37L
                        },
                        new
                        {
                            Id = 138L,
                            PermissionId = 1L,
                            ScreenId = 38L
                        },
                        new
                        {
                            Id = 139L,
                            PermissionId = 2L,
                            ScreenId = 38L
                        },
                        new
                        {
                            Id = 140L,
                            PermissionId = 3L,
                            ScreenId = 38L
                        },
                        new
                        {
                            Id = 141L,
                            PermissionId = 4L,
                            ScreenId = 38L
                        },
                        new
                        {
                            Id = 142L,
                            PermissionId = 1L,
                            ScreenId = 39L
                        },
                        new
                        {
                            Id = 143L,
                            PermissionId = 2L,
                            ScreenId = 39L
                        },
                        new
                        {
                            Id = 144L,
                            PermissionId = 3L,
                            ScreenId = 39L
                        },
                        new
                        {
                            Id = 145L,
                            PermissionId = 4L,
                            ScreenId = 39L
                        },
                        new
                        {
                            Id = 146L,
                            PermissionId = 1L,
                            ScreenId = 33L
                        },
                        new
                        {
                            Id = 147L,
                            PermissionId = 2L,
                            ScreenId = 33L
                        },
                        new
                        {
                            Id = 148L,
                            PermissionId = 3L,
                            ScreenId = 33L
                        },
                        new
                        {
                            Id = 149L,
                            PermissionId = 4L,
                            ScreenId = 33L
                        },
                        new
                        {
                            Id = 150L,
                            PermissionId = 1L,
                            ScreenId = 34L
                        },
                        new
                        {
                            Id = 151L,
                            PermissionId = 2L,
                            ScreenId = 34L
                        },
                        new
                        {
                            Id = 152L,
                            PermissionId = 3L,
                            ScreenId = 34L
                        },
                        new
                        {
                            Id = 153L,
                            PermissionId = 4L,
                            ScreenId = 34L
                        },
                        new
                        {
                            Id = 154L,
                            PermissionId = 1L,
                            ScreenId = 40L
                        },
                        new
                        {
                            Id = 155L,
                            PermissionId = 2L,
                            ScreenId = 40L
                        },
                        new
                        {
                            Id = 156L,
                            PermissionId = 3L,
                            ScreenId = 40L
                        },
                        new
                        {
                            Id = 157L,
                            PermissionId = 4L,
                            ScreenId = 40L
                        },
                        new
                        {
                            Id = 158L,
                            PermissionId = 1L,
                            ScreenId = 41L
                        },
                        new
                        {
                            Id = 159L,
                            PermissionId = 2L,
                            ScreenId = 41L
                        },
                        new
                        {
                            Id = 160L,
                            PermissionId = 3L,
                            ScreenId = 41L
                        },
                        new
                        {
                            Id = 161L,
                            PermissionId = 4L,
                            ScreenId = 41L
                        },
                        new
                        {
                            Id = 162L,
                            PermissionId = 1L,
                            ScreenId = 42L
                        },
                        new
                        {
                            Id = 163L,
                            PermissionId = 2L,
                            ScreenId = 42L
                        },
                        new
                        {
                            Id = 164L,
                            PermissionId = 3L,
                            ScreenId = 42L
                        },
                        new
                        {
                            Id = 165L,
                            PermissionId = 4L,
                            ScreenId = 42L
                        },
                        new
                        {
                            Id = 166L,
                            PermissionId = 1L,
                            ScreenId = 43L
                        },
                        new
                        {
                            Id = 167L,
                            PermissionId = 2L,
                            ScreenId = 43L
                        },
                        new
                        {
                            Id = 168L,
                            PermissionId = 3L,
                            ScreenId = 43L
                        },
                        new
                        {
                            Id = 169L,
                            PermissionId = 4L,
                            ScreenId = 43L
                        },
                        new
                        {
                            Id = 170L,
                            PermissionId = 1L,
                            ScreenId = 44L
                        },
                        new
                        {
                            Id = 171L,
                            PermissionId = 2L,
                            ScreenId = 44L
                        },
                        new
                        {
                            Id = 172L,
                            PermissionId = 3L,
                            ScreenId = 44L
                        },
                        new
                        {
                            Id = 173L,
                            PermissionId = 4L,
                            ScreenId = 44L
                        },
                        new
                        {
                            Id = 174L,
                            PermissionId = 1L,
                            ScreenId = 45L
                        },
                        new
                        {
                            Id = 175L,
                            PermissionId = 2L,
                            ScreenId = 45L
                        },
                        new
                        {
                            Id = 176L,
                            PermissionId = 3L,
                            ScreenId = 45L
                        },
                        new
                        {
                            Id = 177L,
                            PermissionId = 4L,
                            ScreenId = 45L
                        },
                        new
                        {
                            Id = 178L,
                            PermissionId = 1L,
                            ScreenId = 46L
                        },
                        new
                        {
                            Id = 179L,
                            PermissionId = 2L,
                            ScreenId = 46L
                        },
                        new
                        {
                            Id = 180L,
                            PermissionId = 3L,
                            ScreenId = 46L
                        },
                        new
                        {
                            Id = 181L,
                            PermissionId = 4L,
                            ScreenId = 46L
                        },
                        new
                        {
                            Id = 182L,
                            PermissionId = 1L,
                            ScreenId = 47L
                        },
                        new
                        {
                            Id = 183L,
                            PermissionId = 2L,
                            ScreenId = 47L
                        },
                        new
                        {
                            Id = 184L,
                            PermissionId = 3L,
                            ScreenId = 47L
                        },
                        new
                        {
                            Id = 185L,
                            PermissionId = 4L,
                            ScreenId = 47L
                        });
                });

            modelBuilder.Entity("Model.Screens", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<long>("ModuleId");

                    b.Property<int>("Rank");

                    b.Property<string>("ScreenCode")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.ToTable("Screens");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArabicName = "المجموعات",
                            Code = "UGR-1",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 486, DateTimeKind.Local).AddTicks(8905),
                            EnglishName = "Groups",
                            Icon = "fas fa-users",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 1L,
                            Rank = 1,
                            ScreenCode = "Groups"
                        },
                        new
                        {
                            Id = 2L,
                            ArabicName = "المستخدمين",
                            Code = "UUS-2",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(260),
                            EnglishName = "Users",
                            Icon = "fas fa-users-cog",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 1L,
                            Rank = 1,
                            ScreenCode = "Users"
                        },
                        new
                        {
                            Id = 3L,
                            ArabicName = "المعلومات الثابتة",
                            Code = "SSL-3",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(300),
                            EnglishName = "LookUps",
                            Icon = "fas fa-indent",
                            IsActive = true,
                            IsDeleted = true,
                            ModuleId = 2L,
                            Rank = 1,
                            ScreenCode = "LookUps"
                        },
                        new
                        {
                            Id = 4L,
                            ArabicName = "المسميات الوظيفية",
                            Code = "JJT-4",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(325),
                            EnglishName = "Job Titles",
                            Icon = "fas fa-user-md",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 2L,
                            Rank = 1,
                            ScreenCode = "JobTitle"
                        },
                        new
                        {
                            Id = 5L,
                            ArabicName = "حالات الطلب",
                            Code = "Cat-42",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(380),
                            EnglishName = "OrderTrackAction",
                            Icon = "fas fa-luggage-cart",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 4L,
                            Rank = 1,
                            ScreenCode = "OrderTrackAction"
                        },
                        new
                        {
                            Id = 6L,
                            ArabicName = "الدول ",
                            Code = "CCD-9",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(414),
                            EnglishName = "Countries",
                            Icon = "fas fa-globe-europe",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 2L,
                            Rank = 1,
                            ScreenCode = "Country"
                        },
                        new
                        {
                            Id = 7L,
                            ArabicName = " الخدمات",
                            Code = "SC-23",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(457),
                            EnglishName = "Services",
                            Icon = "fas fa-code-branch",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 6L,
                            Rank = 1,
                            ScreenCode = "Services"
                        },
                        new
                        {
                            Id = 8L,
                            ArabicName = "رسم المناطق",
                            Code = "DR-35",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(480),
                            EnglishName = "Draw Region",
                            Icon = "fa fa-map-marker",
                            IsActive = true,
                            IsDeleted = true,
                            ModuleId = 2L,
                            Rank = 1,
                            ScreenCode = "DrawRegion"
                        },
                        new
                        {
                            Id = 9L,
                            ArabicName = "قطع الغيار",
                            Code = "Cat-42",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(501),
                            EnglishName = "Items",
                            Icon = "fas fa-code-branch",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 6L,
                            Rank = 1,
                            ScreenCode = "Items"
                        },
                        new
                        {
                            Id = 10L,
                            ArabicName = "العملاء",
                            Code = "Cat-42",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(526),
                            EnglishName = "Customer",
                            Icon = "fas fa-users",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 4L,
                            Rank = 1,
                            ScreenCode = "Customer"
                        },
                        new
                        {
                            Id = 11L,
                            ArabicName = "العروض",
                            Code = "Cat-42",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(547),
                            EnglishName = "Offers",
                            Icon = "fas fa-luggage-cart",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 4L,
                            Rank = 1,
                            ScreenCode = "Offers"
                        },
                        new
                        {
                            Id = 12L,
                            ArabicName = "الصيانة",
                            Code = "SER-27",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(569),
                            EnglishName = "Services",
                            Icon = "fas fa-code-branch",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 6L,
                            Rank = 1,
                            ScreenCode = "ServicesReport"
                        },
                        new
                        {
                            Id = 13L,
                            ArabicName = "الطلبات",
                            Code = "Cat-42",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(589),
                            EnglishName = "Orders",
                            Icon = "fas fa-luggage-cart",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 4L,
                            Rank = 1,
                            ScreenCode = "Order"
                        },
                        new
                        {
                            Id = 14L,
                            ArabicName = "الفنين",
                            Code = "Cat-42",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(609),
                            EnglishName = "Technicals",
                            Icon = "fas fa-users-cog",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 4L,
                            Rank = 1,
                            ScreenCode = "TechnicalsReport"
                        },
                        new
                        {
                            Id = 15L,
                            ArabicName = "اعدات النظام",
                            Code = "Cat-42",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(629),
                            EnglishName = "Technicals",
                            Icon = "fas fa-users-cog",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 2L,
                            Rank = 1,
                            ScreenCode = "SystemOption"
                        },
                        new
                        {
                            Id = 16L,
                            ArabicName = "اراء العملاء",
                            Code = "Cat-16",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 487, DateTimeKind.Local).AddTicks(650),
                            EnglishName = "Customer Reviews",
                            Icon = "fas fa-users-cog",
                            IsActive = true,
                            IsDeleted = false,
                            ModuleId = 2L,
                            Rank = 1,
                            ScreenCode = "CustomerReview"
                        });
                });

            modelBuilder.Entity("Model.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Model.SystemOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ArabicValue");

                    b.Property<string>("CategoryArName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CategoryEnName")
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("ControlType")
                        .HasMaxLength(200);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("DefaultValue");

                    b.Property<string>("DropdownOptions");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(200);

                    b.Property<string>("EnglishValue");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHidden");

                    b.Property<bool>("IsReadOnly");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<TimeSpan?>("Time");

                    b.Property<string>("Title");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SystemOptions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArabicName = "بداية دوام العمل",
                            CategoryArName = "اعدادات الاجهزة",
                            CategoryEnName = "Devices Settings",
                            Code = "OPT-1",
                            ControlType = "startday",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 478, DateTimeKind.Local).AddTicks(3349),
                            DefaultValue = "5",
                            EnglishName = "Max Devices Count",
                            IsActive = true,
                            IsDeleted = false,
                            IsHidden = false,
                            IsReadOnly = false,
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            Value = "5"
                        },
                        new
                        {
                            Id = 2L,
                            ArabicName = "نهاية دوام العمل",
                            CategoryArName = "اعدادات الاجهزة",
                            CategoryEnName = "Devices Settings",
                            Code = "OPT-2",
                            ControlType = "startday",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 479, DateTimeKind.Local).AddTicks(426),
                            DefaultValue = "5",
                            EnglishName = "Max Devices Count",
                            IsActive = true,
                            IsDeleted = false,
                            IsHidden = false,
                            IsReadOnly = false,
                            Time = new TimeSpan(0, 21, 0, 0, 0),
                            Value = "5"
                        },
                        new
                        {
                            Id = 3L,
                            ArabicName = "المسافة بين الطلبات بالدقائق",
                            CategoryArName = "اعدادات الاجهزة",
                            CategoryEnName = "Devices Settings",
                            Code = "OPT-3",
                            ControlType = "textbox",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 479, DateTimeKind.Local).AddTicks(588),
                            DefaultValue = "30",
                            EnglishName = "Max Devices Count",
                            IsActive = true,
                            IsDeleted = false,
                            IsHidden = false,
                            IsReadOnly = false,
                            Value = "30"
                        });
                });

            modelBuilder.Entity("Model.Technical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Commission");

                    b.Property<bool>("IsParentage");

                    b.Property<DateTime>("LastAssignTime");

                    b.Property<double>("Pocket");

                    b.Property<long?>("ServiceId")
                        .IsRequired();

                    b.Property<long?>("UsersId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UsersId")
                        .IsUnique();

                    b.ToTable("Technicals");
                });

            modelBuilder.Entity("Model.UserGroups", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Model.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long?>("CityId");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ImageName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCompanyManager");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManager");

                    b.Property<bool>("IsMaster");

                    b.Property<long?>("JobTitleId");

                    b.Property<double>("Lat");

                    b.Property<string>("Location");

                    b.Property<double>("Long");

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<long?>("ModifiedBy");

                    b.Property<bool>("OnLine");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Token");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("JobTitleId");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArabicName = "",
                            Code = "US-1",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 477, DateTimeKind.Local).AddTicks(9698),
                            Email = "exm@gmail.com",
                            EnglishName = "",
                            ImageName = "default.jpg",
                            IsActive = true,
                            IsCompanyManager = false,
                            IsDeleted = false,
                            IsManager = false,
                            IsMaster = true,
                            Lat = 0.0,
                            Long = 0.0,
                            Mobile = "1234",
                            OnLine = false,
                            Password = "4VCsPmt2m2ChrhC2k/i+hw==",
                            UserName = "AdminDev"
                        },
                        new
                        {
                            Id = 2L,
                            ArabicName = "",
                            Code = "US-2",
                            CreationDate = new DateTime(2020, 8, 16, 0, 46, 37, 478, DateTimeKind.Local).AddTicks(1698),
                            Email = "exm1@gmail.com",
                            EnglishName = "",
                            ImageName = "default.jpg",
                            IsActive = true,
                            IsCompanyManager = false,
                            IsDeleted = false,
                            IsManager = false,
                            IsMaster = false,
                            Lat = 0.0,
                            Long = 0.0,
                            Mobile = "1235",
                            OnLine = false,
                            Password = "iskJ2vxZtjfyhzajgb3HkQ==",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Model.City", b =>
                {
                    b.HasOne("Model.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Customer", b =>
                {
                    b.HasOne("Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Model.District", b =>
                {
                    b.HasOne("Model.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Item", b =>
                {
                    b.HasOne("Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.ItemFavourite", b =>
                {
                    b.HasOne("Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.ItemImage", b =>
                {
                    b.HasOne("Model.Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.ItemsCart", b =>
                {
                    b.HasOne("Model.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Offer", b =>
                {
                    b.HasOne("Model.Item", "FreeItem")
                        .WithMany()
                        .HasForeignKey("FreeItemId");

                    b.HasOne("Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Item", "MainItem")
                        .WithMany()
                        .HasForeignKey("MainItemId");
                });

            modelBuilder.Entity("Model.Order", b =>
                {
                    b.HasOne("Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.OrderTrackAction", "OrderTrackAction")
                        .WithMany()
                        .HasForeignKey("OrderTrackActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Users", "ResponsibleUser")
                        .WithMany("Orders")
                        .HasForeignKey("ResponsibleUserId");
                });

            modelBuilder.Entity("Model.OrderItems", b =>
                {
                    b.HasOne("Model.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.OrderServices", b =>
                {
                    b.HasOne("Model.Order", "Order")
                        .WithOne("OrderService")
                        .HasForeignKey("Model.OrderServices", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.OrderServicesImages", b =>
                {
                    b.HasOne("Model.Order")
                        .WithMany("ServicesImages")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.OrderTechnicalAssignment", b =>
                {
                    b.HasOne("Model.Order", "Order")
                        .WithMany("OrderTechAssign")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Users", "TechnicalUser")
                        .WithMany()
                        .HasForeignKey("TechnicalUserId");
                });

            modelBuilder.Entity("Model.OrderTrack", b =>
                {
                    b.HasOne("Model.Order", "Order")
                        .WithMany("OrderTracks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.OrderTrackAction", "OrderTrackAction")
                        .WithMany()
                        .HasForeignKey("OrderTrackActionId");
                });

            modelBuilder.Entity("Model.ReadyTechnicals", b =>
                {
                    b.HasOne("Model.Users", "Technical")
                        .WithMany()
                        .HasForeignKey("TechnicalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Technical", b =>
                {
                    b.HasOne("Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Users", "User")
                        .WithOne("Technical")
                        .HasForeignKey("Model.Technical", "UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Users", b =>
                {
                    b.HasOne("Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Model.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Model.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");
                });
#pragma warning restore 612, 618
        }
    }
}
